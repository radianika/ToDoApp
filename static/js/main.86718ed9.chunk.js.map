{"version":3,"sources":["ToDoItem.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","react_default","a","createElement","className","value","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNewItem","event","keyCode","newItem","target","setState","prevstate","newArray","toConsumableArray","toDoItems","push","state","placeholder","type","autoFocus","onKeyDown","map","item","index","src_ToDoItem","key","React","Component","App","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAUeA,MAPf,SAAkBC,GACd,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAMJ,EAAMK,QCuCnBC,cAvCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOJI,WAAa,SAACC,GACV,GAAsB,KAAlBA,EAAMC,QAAe,CACrB,IAAIC,EAAUF,EAAMG,OAAOb,MAC3BE,EAAKY,SAAS,SAAAC,GACV,IAAMC,EAAQb,OAAAc,EAAA,EAAAd,CAAOY,EAAUG,WAE/B,OADAF,EAASG,KAAKP,GAEV,CACAM,UAAWF,OAdvBd,EAAKkB,MAAQ,CACTF,UAAW,CAAC,QAAS,SACrBG,YAAa,0BAJRnB,wEAuBT,OACIN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAQC,UAAU,WACVuB,KAAK,OACLD,YAAahB,KAAKe,MAAMC,YACxBE,WAAS,EACTC,UAAWnB,KAAKI,aACxBb,EAAAC,EAAAC,cAAA,UACKO,KAAKe,MAAMF,UAAUO,IAAI,SAACC,EAAMC,GAAP,OAAiB/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAUC,IAAKF,EAAO3B,MAAO0B,eAhCrEI,IAAMC,WCUVC,MATf,WACE,OACEpC,EAAAC,EAAAC,cAAA,OAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,WACAH,EAAAC,EAAAC,cAACmC,EAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.86718ed9.chunk.js","sourcesContent":["import React from 'react'\n\n\nfunction ToDoItem(props){\n    return (\n        <li className=\"li\">{props.value}</li>\n    )\n\n}\n\nexport default ToDoItem","import React from 'react'\n\n\nimport ToDoItem from './ToDoItem'\nclass Main extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            toDoItems: ['sleep', 'drink'],\n            placeholder: \"What needs to be done?\",\n        }\n        \n    }\n    addNewItem = (event) => {\n        if (event.keyCode === 13){\n            let newItem = event.target.value;\n            this.setState(prevstate => {\n                const newArray = [...prevstate.toDoItems];\n                newArray.push(newItem);\n                return(\n                    {\n                    toDoItems: newArray\n                    }\n                )\n            })\n        }\n    }\n    render(){\n        return(\n            <div>\n            <input  className=\"new-todo\" \n                    type=\"text\" \n                    placeholder={this.state.placeholder} \n                    autoFocus \n                    onKeyDown={this.addNewItem} />\n            <ul>\n                {this.state.toDoItems.map((item, index) => <ToDoItem key={index} value={item}/>)}\n\n            </ul>\n            </div>\n        )   \n    }\n}\n\nexport default Main","import React from 'react';\n\nimport './App.css';\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div  className=\"todoapp\">\n    <h1 className=\"title\">todoapp</h1>\n    <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}